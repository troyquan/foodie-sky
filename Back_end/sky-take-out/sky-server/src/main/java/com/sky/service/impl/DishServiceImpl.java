package com.sky.service.impl;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.sky.constant.MessageConstant;
import com.sky.constant.StatusConstant;
import com.sky.dto.DishDTO;
import com.sky.dto.DishPageQueryDTO;
import com.sky.entity.Dish;
import com.sky.entity.DishFlavor;
import com.sky.exception.DeletionNotAllowedException;
import com.sky.mapper.DishFlavorMapper;
import com.sky.mapper.DishMapper;
import com.sky.mapper.SetmealDishMapper;
import com.sky.result.PageResult;
import com.sky.service.DishService;
import com.sky.vo.DishVO;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * @author Lingjun
 * @date 2023/8/10 17:45
 */
@Service
@Slf4j
public class DishServiceImpl implements DishService {

    @Autowired
    private DishMapper dishMapper;
    @Autowired
    private DishFlavorMapper dishFlavorMapper;
    @Autowired
    private SetmealDishMapper setmealDishMapper;

    /**
     * Create new dishes and corresponding flavors
     *
     * @param dishDTO
     */
    @Transactional
    public void saveWithFlavor(DishDTO dishDTO) {

        Dish dish = new Dish();

        BeanUtils.copyProperties(dishDTO, dish);

        //Insert 1 piece of data into the dish table
        dishMapper.insert(dish);

        //Getting the primary key value generated by an INSERT statement in the DishMapper.xml file
        Long dishId = dish.getId();

        List<DishFlavor> flavors = dishDTO.getFlavors();
        if (flavors != null && flavors.size() > 0) {
            flavors.forEach(dishFlavor -> {
                dishFlavor.setDishId(dishId);
            });
            //Insert multiple pieces of data into the flavor table
            dishFlavorMapper.insertBatch(flavors);
        }
    }

    /**
     * Dish Pagination Query
     *
     * @param dishPageQueryDTO
     * @return
     */
    public PageResult pageQuery(DishPageQueryDTO dishPageQueryDTO) {
        PageHelper.startPage(dishPageQueryDTO.getPage(), dishPageQueryDTO.getPageSize());
        Page<DishVO> page = dishMapper.pageQuery(dishPageQueryDTO);
        return new PageResult(page.getTotal(), page.getResult());
    }

    /**
     * Batch deletion of dishes
     *
     * @param ids
     */
    @Transactional
    public void deleteBatch(List<Long> ids) {
        //Determine if the current dish can be deleted - is there a dish on sale?
        for (Long id : ids) {
            Dish dish = dishMapper.getById(id);
            if (dish.getStatus() == StatusConstant.ENABLE) {
                //The current dish is on sale and cannot be deleted.
                throw new DeletionNotAllowedException(MessageConstant.DISH_ON_SALE);
            }
        }

        //Determine if the current dish can be deleted - is it associated with a package?
        List<Long> setmealIds = setmealDishMapper.getSetmealIdsByDishIds(ids);
        if (setmealIds != null && setmealIds.size() > 0) {
            //The current dish is associated with a package and cannot be deleted.
            throw new DeletionNotAllowedException(MessageConstant.DISH_BE_RELATED_BY_SETMEAL);
        }

        //Delete dish data in the dish table
        for (Long id : ids) {
            dishMapper.deleteById(id);
            //Delete flavor data associated with a dish
            dishFlavorMapper.deleteByDishId(id);
        }
    }

    /**
     * Query dishes and corresponding flavor data based on ids
     *
     * @param id
     * @return
     */
    public DishVO getByIdWithFlavor(Long id) {
        //Query dish data by id
        Dish dish = dishMapper.getById(id);

        //Query flavor data based on dish id
        List<DishFlavor> dishFlavors = dishFlavorMapper.getByDishId(id);

        //Encapsulate the queried data into VO
        DishVO dishVO = new DishVO();
        BeanUtils.copyProperties(dish, dishVO);
        dishVO.setFlavors(dishFlavors);

        return dishVO;
    }

    /**
     * Update the basic information of the dish and the corresponding flavor information according to the id
     *
     * @param dishDTO
     */
    public void updateWithFlavor(DishDTO dishDTO) {
        Dish dish = new Dish();
        BeanUtils.copyProperties(dishDTO, dish);

        //Update the basic information of the menu table
        dishMapper.update(dish);

        //Delete original flavor data
        dishFlavorMapper.deleteByDishId(dishDTO.getId());

        //Re-insert flavor data
        List<DishFlavor> flavors = dishDTO.getFlavors();
        if (flavors != null && flavors.size() > 0) {
            flavors.forEach(dishFlavor -> {
                dishFlavor.setDishId(dishDTO.getId());
            });
            //Insert several data into the flavor table
            dishFlavorMapper.insertBatch(flavors);
        }
    }


}
